#!/bin/bash

# ==============================================================================
# Ollama Context Window Variant Generator (Final Version)
#
# Description:
# This final version handles all known edge cases:
# - Works with older Ollama versions by parsing plain text.
# - Prevents silent exits if model details can't be parsed.
# - Sanitizes model names containing slashes (e.g., "namespace/model")
#   to create valid filenames.
#
# ==============================================================================

set -e # Exit immediately if a command exits with a non-zero status.
set -o pipefail # The return value of a pipeline is the status of the last command to exit with a non-zero status.

# --- Configuration ---
OUTPUT_DIR="$HOME/dev/ollama/Modelfiles"
START_CONTEXT=8192

# --- Script Logic ---

mkdir -p "$OUTPUT_DIR"
echo "INFO: Modelfiles will be saved in '$OUTPUT_DIR'"

OVERWRITE_ALL=false
read -p "Do you want to overwrite existing Modelfiles and recreate models? (y/N) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    OVERWRITE_ALL=true
    echo "INFO: Overwrite enabled. Existing files will be replaced."
else
    echo "INFO: Overwrite disabled. Existing models/files will be skipped."
fi

ALL_MODEL_TAGS=$(ollama list | awk 'NR>1 {print $1}' || true)

if [ -z "$ALL_MODEL_TAGS" ]; then
    echo "ERROR: No Ollama models found. Exiting."
    exit 1
fi

echo "--- Starting Model Scan ---"

for model_tag in $ALL_MODEL_TAGS; do
    echo "---"
    echo "Processing Tag: $model_tag"

    modelfile_content=$(ollama show --modelfile "$model_tag")

    if echo "$modelfile_content" | grep -q '^FROM .*:.*'; then
        from_model=$(echo "$modelfile_content" | grep '^FROM' | awk '{print $2}')
        echo "INFO: Skipping '$model_tag' as it is derived from '$from_model'."
        continue
    fi
    echo "INFO: '$model_tag' identified as a base model."

    model_info_text=$(ollama show "$model_tag")

    param_size=$(echo "$model_info_text" | grep 'parameters' | awk '{print $2}' || true)
    max_ctx=$(echo "$model_info_text" | grep 'context length' | awk '{print $3}' || true)

    if [ -z "$param_size" ] || [ -z "$max_ctx" ]; then
        echo "WARNING: Could not determine parameter size or max context for '$model_tag'. Skipping."
        continue
    fi

    params_sanitized=$(echo "$param_size" | tr '[:upper:]' '[:lower:]' | sed -E 's/\..*b/b/')
    
    # --- MODIFICATION START: Sanitize model name for filename ---
    # Get the base name, which might contain a slash (e.g., "namespace/model")
    model_base_name_raw=$(echo "$model_tag" | cut -d':' -f1)
    # Sanitize the name for use in filenames by replacing any '/' with a '-'
    model_base_name=$(echo "$model_base_name_raw" | tr '/' '-')
    # --- MODIFICATION END ---

    echo "INFO: Found Model: $model_base_name_raw | Parameters: $param_size | Max Context: ${max_ctx} tokens"

    current_ctx=$START_CONTEXT
    while [ "$current_ctx" -le "$max_ctx" ]; do
        context_k=$((current_ctx / 1024))
        # Use the raw (un-sanitized) name for the new Ollama tag, but the sanitized one for the filename
        new_tag_name="${model_base_name_raw}:${params_sanitized}-${context_k}k"
        modelfile_name="my-${model_base_name}-${params_sanitized}-${context_k}k.modelfile"
        modelfile_path="$OUTPUT_DIR/$modelfile_name"

        echo " -> Preparing variant: $new_tag_name"

        if [ "$OVERWRITE_ALL" = false ] && (ollama list | grep -q "^${new_tag_name}\s" || [ -f "$modelfile_path" ]); then
            echo "    SKIPPED: Variant '$new_tag_name' or Modelfile '$modelfile_name' already exists."
            current_ctx=$((current_ctx * 2))
            continue
        fi

        cat > "$modelfile_path" << EOM
# Modelfile for ${new_tag_name}
# Generated by script on $(date)

FROM ${model_tag}

# Set the new context window size
PARAMETER num_ctx ${current_ctx}
EOM

        echo "    CREATED Modelfile: $modelfile_path"
        echo "    CREATING Ollama model '$new_tag_name'..."
        if ollama create "$new_tag_name" -f "$modelfile_path"; then
            echo "    SUCCESS: Created '$new_tag_name'."
        else
            echo "    ERROR: Failed to create '$new_tag_name'. Check logs above."
        fi

        current_ctx=$((current_ctx * 2))
    done
done

echo "---"
echo "Script finished."
