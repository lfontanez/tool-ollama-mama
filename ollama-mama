#!/bin/bash

# ==============================================================================
# Ollama Context Window Variant Generator
#
# Description:
# This script manages Ollama model variants with different context window sizes.
# - Works with older Ollama versions by parsing plain text.
# - Prevents silent exits if model details can't be parsed.
# - Sanitizes model names containing slashes (e.g., "namespace/model")
#   to create valid filenames.
#
# Commands:
# - ctx --create: Create model variants with different context sizes
# - ctx --delete: Delete generated model variants and their Modelfiles
#
# ==============================================================================

set -e # Exit immediately if a command exits with a non-zero status.
set -o pipefail # The return value of a pipeline is the status of the last command to exit with a non-zero status.

# --- Configuration ---
OUTPUT_DIR="$HOME/dev/ollama/Modelfiles"
START_CONTEXT=8192

# --- Functions ---

show_usage() {
    echo "Usage: $0 ctx [--create|--delete|--delete-base <model>|--create-base <model>|--list [filter]]"
    echo ""
    echo "Commands:"
    echo "  ctx --create              Create model variants with different context window sizes"
    echo "  ctx --delete              Delete generated model variants and their Modelfiles"
    echo "  ctx --delete-base <model> Delete a specific base model and all its variants"
    echo "  ctx --create-base <model> Create variants for a specific base model only"
    echo "  ctx --list [filter]       List base models with context window information"
    echo ""
    echo "Examples:"
    echo "  $0 ctx --create"
    echo "  $0 ctx --delete"
    echo "  $0 ctx --delete-base fredrezones55/unsloth-deepseek-r1:8b"
    echo "  $0 ctx --create-base fredrezones55/unsloth-deepseek-r1:8b"
    echo "  $0 ctx --list"
    echo "  $0 ctx --list llama"
}

create_variants_for_model() {
    local model_tag="$1"
    local param_size="$2"
    local max_ctx="$3"
    local overwrite_all="$4"

    params_sanitized=$(echo "$param_size" | tr '[:upper:]' '[:lower:]' | sed -E 's/\..*b/b/')
    
    # --- MODIFICATION START: Sanitize model name for filename ---
    # Get the base name, which might contain a slash (e.g., "namespace/model")
    model_base_name_raw=$(echo "$model_tag" | cut -d':' -f1)
    # Sanitize the name for use in filenames by replacing any '/' with a '-'
    model_base_name=$(echo "$model_base_name_raw" | tr '/' '-')
    # --- MODIFICATION END ---

    echo "INFO: Found Model: $model_base_name_raw | Parameters: $param_size | Max Context: ${max_ctx} tokens"

    current_ctx=$START_CONTEXT
    while [ "$current_ctx" -le "$max_ctx" ]; do
        context_k=$((current_ctx / 1024))
        # Use the raw (un-sanitized) name for the new Ollama tag, but the sanitized one for the filename
        new_tag_name="${model_base_name_raw}:${params_sanitized}-${context_k}k"
        modelfile_name="my-${model_base_name}-${params_sanitized}-${context_k}k.modelfile"
        modelfile_path="$OUTPUT_DIR/$modelfile_name"

        echo " -> Preparing variant: $new_tag_name"

        if [ "$overwrite_all" = false ] && (ollama list | grep -q "^${new_tag_name}\s" || [ -f "$modelfile_path" ]); then
            echo "    SKIPPED: Variant '$new_tag_name' or Modelfile '$modelfile_name' already exists."
            current_ctx=$((current_ctx * 2))
            continue
        fi

        cat > "$modelfile_path" << EOM
# Modelfile for ${new_tag_name}
# Generated by script on $(date)

FROM ${model_tag}

# Set the new context window size
PARAMETER num_ctx ${current_ctx}
EOM

        echo "    CREATED Modelfile: $modelfile_path"
        echo "    CREATING Ollama model '$new_tag_name'..."
        if ollama create "$new_tag_name" -f "$modelfile_path"; then
            echo "    SUCCESS: Created '$new_tag_name'."
        else
            echo "    ERROR: Failed to create '$new_tag_name'. Check logs above."
        fi

        current_ctx=$((current_ctx * 2))
    done
}

create_models() {

    mkdir -p "$OUTPUT_DIR"
    echo "INFO: Modelfiles will be saved in '$OUTPUT_DIR'"

    OVERWRITE_ALL=false
    read -p "Do you want to overwrite existing Modelfiles and recreate models? (y/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        OVERWRITE_ALL=true
        echo "INFO: Overwrite enabled. Existing files will be replaced."
    else
        echo "INFO: Overwrite disabled. Existing models/files will be skipped."
    fi

    ALL_MODEL_TAGS=$(ollama list | awk 'NR>1 {print $1}' || true)

    if [ -z "$ALL_MODEL_TAGS" ]; then
        echo "ERROR: No Ollama models found. Exiting."
        exit 1
    fi

    echo "--- Starting Model Scan ---"

    for model_tag in $ALL_MODEL_TAGS; do
        echo "---"
        echo "Processing Tag: $model_tag"

        modelfile_content=$(ollama show --modelfile "$model_tag")

        if echo "$modelfile_content" | grep -q '^FROM .*:.*'; then
            from_model=$(echo "$modelfile_content" | grep '^FROM' | awk '{print $2}')
            echo "INFO: Skipping '$model_tag' as it is derived from '$from_model'."
            continue
        fi
        echo "INFO: '$model_tag' identified as a base model."

        model_info_text=$(ollama show "$model_tag")

        param_size=$(echo "$model_info_text" | grep 'parameters' | awk '{print $2}' || true)
        max_ctx=$(echo "$model_info_text" | grep 'context length' | awk '{print $3}' || true)

        if [ -z "$param_size" ] || [ -z "$max_ctx" ]; then
            echo "WARNING: Could not determine parameter size or max context for '$model_tag'. Skipping."
            continue
        fi

        create_variants_for_model "$model_tag" "$param_size" "$max_ctx" "$OVERWRITE_ALL"
    done

    echo "---"
    echo "Script finished."
}

create_base_model() {
    local base_model="$1"
    
    echo "--- Starting Base Model Variant Creation ---"
    echo "Target base model: $base_model"
    
    mkdir -p "$OUTPUT_DIR"
    echo "INFO: Modelfiles will be saved in '$OUTPUT_DIR'"

    # Check if model exists in Ollama
    ALL_MODEL_TAGS=$(ollama list | awk 'NR>1 {print $1}' || true)
    
    if [ -z "$ALL_MODEL_TAGS" ]; then
        echo "ERROR: No Ollama models found. Exiting."
        exit 1
    fi

    MODEL_EXISTS=false
    for model_tag in $ALL_MODEL_TAGS; do
        if [ "$model_tag" = "$base_model" ]; then
            MODEL_EXISTS=true
            break
        fi
    done

    if [ "$MODEL_EXISTS" = false ]; then
        echo "ERROR: Model '$base_model' not found in Ollama."
        echo "Available models:"
        echo "$ALL_MODEL_TAGS" | sed 's/^/  - /'
        exit 1
    fi

    # Check if it's a variant (ends with -NNk pattern)
    if [[ "$base_model" =~ -[0-9]+k$ ]]; then
        echo "ERROR: '$base_model' appears to be a variant model (ends with -NNk)."
        echo "Please specify a base model instead."
        exit 1
    fi

    # Check if it's derived from another model
    modelfile_content=$(ollama show --modelfile "$base_model")
    if echo "$modelfile_content" | grep -q '^FROM .*:.*'; then
        from_model=$(echo "$modelfile_content" | grep '^FROM' | awk '{print $2}')
        echo "ERROR: '$base_model' is derived from '$from_model'."
        echo "Please specify a base model instead."
        exit 1
    fi

    echo "INFO: '$base_model' validated as a base model."

    # Get overwrite preference
    OVERWRITE_ALL=false
    read -p "Do you want to overwrite existing Modelfiles and recreate models? (y/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        OVERWRITE_ALL=true
        echo "INFO: Overwrite enabled. Existing files will be replaced."
    else
        echo "INFO: Overwrite disabled. Existing models/files will be skipped."
    fi

    # Get model information
    model_info_text=$(ollama show "$base_model")

    param_size=$(echo "$model_info_text" | grep 'parameters' | awk '{print $2}' || true)
    max_ctx=$(echo "$model_info_text" | grep 'context length' | awk '{print $3}' || true)

    if [ -z "$param_size" ] || [ -z "$max_ctx" ]; then
        echo "ERROR: Could not determine parameter size or max context for '$base_model'."
        echo "This might indicate an issue with the model or Ollama version compatibility."
        exit 1
    fi

    echo "---"
    echo "Processing Tag: $base_model"

    # Create variants using the extracted function
    create_variants_for_model "$base_model" "$param_size" "$max_ctx" "$OVERWRITE_ALL"

    echo "---"
    echo "Base model variant creation completed."
}

delete_models() {
    echo "--- Starting Model Deletion ---"
    
    ALL_MODEL_TAGS=$(ollama list | awk 'NR>1 {print $1}' || true)

    if [ -z "$ALL_MODEL_TAGS" ]; then
        echo "ERROR: No Ollama models found. Exiting."
        exit 1
    fi

    # Find generated models (those matching the pattern {model}:{params}-{context}k)
    GENERATED_MODELS=()
    for model_tag in $ALL_MODEL_TAGS; do
        # Check if model matches the generated pattern: contains colon and ends with -NNk
        if [[ "$model_tag" =~ :[^:]*-[0-9]+k$ ]]; then
            GENERATED_MODELS+=("$model_tag")
        fi
    done

    if [ ${#GENERATED_MODELS[@]} -eq 0 ]; then
        echo "INFO: No generated model variants found to delete."
        return 0
    fi

    echo "Found ${#GENERATED_MODELS[@]} generated model variant(s):"
    for model in "${GENERATED_MODELS[@]}"; do
        echo "  - $model"
    done
    echo ""

    # Find corresponding Modelfiles
    MODELFILES_TO_DELETE=()
    if [ -d "$OUTPUT_DIR" ]; then
        for modelfile in "$OUTPUT_DIR"/my-*-*k.modelfile; do
            if [ -f "$modelfile" ]; then
                MODELFILES_TO_DELETE+=("$modelfile")
            fi
        done
    fi

    if [ ${#MODELFILES_TO_DELETE[@]} -gt 0 ]; then
        echo "Found ${#MODELFILES_TO_DELETE[@]} corresponding Modelfile(s):"
        for modelfile in "${MODELFILES_TO_DELETE[@]}"; do
            echo "  - $(basename "$modelfile")"
        done
        echo ""
    fi

    # Confirmation prompt
    echo "This will delete:"
    echo "  - ${#GENERATED_MODELS[@]} Ollama model variant(s)"
    echo "  - ${#MODELFILES_TO_DELETE[@]} Modelfile(s)"
    echo ""
    read -p "Are you sure you want to proceed? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "INFO: Deletion cancelled."
        return 0
    fi

    # Delete Ollama models
    echo "--- Deleting Ollama Models ---"
    for model in "${GENERATED_MODELS[@]}"; do
        echo "Deleting model: $model"
        if ollama rm "$model"; then
            echo "  SUCCESS: Deleted '$model'"
        else
            echo "  ERROR: Failed to delete '$model'"
        fi
    done

    # Delete Modelfiles
    if [ ${#MODELFILES_TO_DELETE[@]} -gt 0 ]; then
        echo "--- Deleting Modelfiles ---"
        for modelfile in "${MODELFILES_TO_DELETE[@]}"; do
            echo "Deleting file: $(basename "$modelfile")"
            if rm -f "$modelfile"; then
                echo "  SUCCESS: Deleted '$(basename "$modelfile")'"
            else
                echo "  ERROR: Failed to delete '$(basename "$modelfile")'"
            fi
        done
    fi

    echo "---"
    echo "Deletion completed."
}

delete_base_model() {
    local base_model="$1"
    
    echo "--- Starting Base Model Deletion ---"
    echo "Target base model: $base_model"
    
    ALL_MODEL_TAGS=$(ollama list | awk 'NR>1 {print $1}' || true)

    if [ -z "$ALL_MODEL_TAGS" ]; then
        echo "ERROR: No Ollama models found. Exiting."
        exit 1
    fi

    # Find the base model and its variants
    MODELS_TO_DELETE=()
    BASE_MODEL_EXISTS=false
    
    for model_tag in $ALL_MODEL_TAGS; do
        if [ "$model_tag" = "$base_model" ]; then
            BASE_MODEL_EXISTS=true
            MODELS_TO_DELETE+=("$model_tag")
        else
            # Extract the base part of the model tag (everything before the last colon and context suffix)
            # For variants like "model:tag-8k", we want to match against "model:tag"
            if [[ "$model_tag" =~ ^(.+)-[0-9]+k$ ]]; then
                variant_base="${BASH_REMATCH[1]}"
                if [ "$variant_base" = "$base_model" ]; then
                    MODELS_TO_DELETE+=("$model_tag")
                fi
            fi
        fi
    done

    if [ "$BASE_MODEL_EXISTS" = false ]; then
        echo "WARNING: Base model '$base_model' not found in Ollama."
    fi

    if [ ${#MODELS_TO_DELETE[@]} -eq 0 ]; then
        echo "INFO: No models found to delete for base model '$base_model'."
        return 0
    fi

    echo "Found ${#MODELS_TO_DELETE[@]} model(s) to delete:"
    for model in "${MODELS_TO_DELETE[@]}"; do
        if [ "$model" = "$base_model" ]; then
            echo "  - $model (base model)"
        else
            echo "  - $model (variant)"
        fi
    done
    echo ""

    # Find corresponding Modelfiles for variants
    MODELFILES_TO_DELETE=()
    if [ -d "$OUTPUT_DIR" ]; then
        # Sanitize base model name for filename matching
        model_base_name_raw=$(echo "$base_model" | cut -d':' -f1)
        model_base_name=$(echo "$model_base_name_raw" | tr '/' '-')
        
        # Extract parameters from base model tag if present
        if [[ "$base_model" =~ : ]]; then
            model_params=$(echo "$base_model" | cut -d':' -f2)
        else
            model_params="*"
        fi
        
        for modelfile in "$OUTPUT_DIR"/my-${model_base_name}-${model_params}-*k.modelfile; do
            if [ -f "$modelfile" ]; then
                MODELFILES_TO_DELETE+=("$modelfile")
            fi
        done
    fi

    if [ ${#MODELFILES_TO_DELETE[@]} -gt 0 ]; then
        echo "Found ${#MODELFILES_TO_DELETE[@]} corresponding Modelfile(s):"
        for modelfile in "${MODELFILES_TO_DELETE[@]}"; do
            echo "  - $(basename "$modelfile")"
        done
        echo ""
    fi

    # Confirmation prompt
    echo "This will delete:"
    echo "  - ${#MODELS_TO_DELETE[@]} Ollama model(s) (including base model and variants)"
    echo "  - ${#MODELFILES_TO_DELETE[@]} Modelfile(s)"
    echo ""
    read -p "Are you sure you want to proceed? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "INFO: Deletion cancelled."
        return 0
    fi

    # Delete Ollama models
    echo "--- Deleting Ollama Models ---"
    for model in "${MODELS_TO_DELETE[@]}"; do
        echo "Deleting model: $model"
        if ollama rm "$model"; then
            echo "  SUCCESS: Deleted '$model'"
        else
            echo "  ERROR: Failed to delete '$model'"
        fi
    done

    # Delete Modelfiles
    if [ ${#MODELFILES_TO_DELETE[@]} -gt 0 ]; then
        echo "--- Deleting Modelfiles ---"
        for modelfile in "${MODELFILES_TO_DELETE[@]}"; do
            echo "Deleting file: $(basename "$modelfile")"
            if rm -f "$modelfile"; then
                echo "  SUCCESS: Deleted '$(basename "$modelfile")'"
            else
                echo "  ERROR: Failed to delete '$(basename "$modelfile")'"
            fi
        done
    fi

    echo "---"
    echo "Base model deletion completed."
}

list_models() {
    local filter="$1"
    
    echo "OLLAMA BASE MODELS - CONTEXT WINDOW LEADERBOARD"
    echo "================================================"
    
    if [ -n "$filter" ]; then
        echo "Filter: Models containing '$filter'"
        echo ""
    fi
    
    ALL_MODEL_TAGS=$(ollama list | awk 'NR>1 {print $1}' || true)

    if [ -z "$ALL_MODEL_TAGS" ]; then
        echo "ERROR: No Ollama models found. Exiting."
        exit 1
    fi

    # Array to store model information for sorting
    declare -a MODEL_DATA=()
    
    for model_tag in $ALL_MODEL_TAGS; do
        # Apply filter if provided
        if [ -n "$filter" ] && [[ "$model_tag" != *"$filter"* ]]; then
            continue
        fi
        
        # Skip empty or malformed model tags
        if [ -z "$model_tag" ] || [[ "$model_tag" =~ ^[[:space:]]*$ ]]; then
            continue
        fi
        
        # Skip generated variant models (those matching the pattern {model}:{params}-{context}k)
        if [[ "$model_tag" =~ :[^:]*-[0-9]+k$ ]]; then
            continue
        fi
        
        # Check if it's a base model (not derived from another)
        modelfile_content=$(ollama show --modelfile "$model_tag" 2>/dev/null || echo "")
        
        if echo "$modelfile_content" | grep -q '^FROM .*:.*'; then
            continue  # Skip derived models
        fi
        
        # Get model information
        model_info_text=$(ollama show "$model_tag" 2>/dev/null || echo "")
        
        # Extract parameter size and max context with improved parsing
        param_size_raw=$(echo "$model_info_text" | grep 'parameters' | awk '{print $2}' || echo "")
        max_ctx_raw=$(echo "$model_info_text" | grep 'context length' | awk '{print $3}' || echo "")
        
        # Clean and validate parameter size
        if [ -n "$param_size_raw" ] && [ "$param_size_raw" != "" ]; then
            # Remove any trailing characters and normalize (e.g., "7.24B" -> "7.24B")
            param_size=$(echo "$param_size_raw" | sed 's/[[:space:]]*$//')
        else
            param_size="Unknown"
        fi
        
        # Clean and validate max context - ensure it's a valid integer
        if [ -n "$max_ctx_raw" ] && [[ "$max_ctx_raw" =~ ^[0-9]+$ ]]; then
            max_ctx="$max_ctx_raw"
        else
            max_ctx="0"
        fi
        
        # Calculate estimated memory usage for context (more accurate approximation)
        # Using 2 bytes per token as a conservative estimate for context storage
        if [ "$max_ctx" -gt 0 ] && [[ "$max_ctx" =~ ^[0-9]+$ ]]; then
            # Calculate in KB first to avoid integer overflow and get better precision
            context_kb=$((max_ctx * 2 / 1024))
            
            if [ "$context_kb" -ge 1024 ]; then
                # Convert to MB if >= 1024 KB
                context_mb=$((context_kb / 1024))
                if [ "$context_mb" -ge 1024 ]; then
                    # Convert to GB if >= 1024 MB
                    context_gb=$((context_mb / 1024))
                    context_display="~${context_gb} GB"
                else
                    context_display="~${context_mb} MB"
                fi
            else
                # Show in KB for smaller values
                if [ "$context_kb" -eq 0 ]; then
                    context_kb=1  # Minimum 1 KB
                fi
                context_display="~${context_kb} KB"
            fi
        else
            context_display="Unknown"
        fi
        
        # Validate all components before adding to array
        if [ -n "$model_tag" ] && [ -n "$param_size" ] && [ -n "$max_ctx" ] && [ -n "$context_display" ]; then
            # Store model data: "max_ctx|model_tag|param_size|context_display"
            MODEL_DATA+=("${max_ctx}|${model_tag}|${param_size}|${context_display}")
        fi
    done
    
    # Check if any base models were found
    if [ ${#MODEL_DATA[@]} -eq 0 ]; then
        if [ -n "$filter" ]; then
            echo "No base models found matching filter '$filter'."
        else
            echo "No base models found."
        fi
        echo ""
        echo "Note: Only base models are shown (derived models with 'FROM' statements are excluded)."
        return 0
    fi
    
    # Sort by max context (descending) - using sort with numeric comparison
    IFS=$'\n' SORTED_DATA=($(printf '%s\n' "${MODEL_DATA[@]}" | sort -t'|' -k1,1nr))
    
    # Calculate dynamic width for Model Name column
    max_model_name_length=10  # Minimum width
    for data in "${SORTED_DATA[@]}"; do
        if [[ "$data" != *"|"* ]]; then
            continue  # Skip malformed entries
        fi
        
        IFS='|' read -r max_ctx model_tag param_size context_display <<< "$data"
        
        if [ -n "$model_tag" ] && [ ${#model_tag} -gt $max_model_name_length ]; then
            max_model_name_length=${#model_tag}
        fi
    done
    
    # Print table header
    printf "%-4s | %-${max_model_name_length}s | %-10s | %-11s | %-13s\n" "Rank" "Model Name" "Parameters" "Max Context" "Context Mem"
    printf "%-4s-|-%-${max_model_name_length}s-|-%-10s-|-%-11s-|-%-13s\n" "----" "$(printf '%*s' $max_model_name_length '' | tr ' ' '-')" "----------" "-----------" "-------------"
    
    # Print sorted results
    rank=1
    for data in "${SORTED_DATA[@]}"; do
        # Validate data format before processing
        if [[ "$data" != *"|"* ]]; then
            continue  # Skip malformed entries
        fi
        
        IFS='|' read -r max_ctx model_tag param_size context_display <<< "$data"
        
        # Validate parsed components
        if [ -z "$model_tag" ] || [ -z "$param_size" ] || [ -z "$context_display" ]; then
            continue  # Skip entries with missing data
        fi
        
        # Format max context with commas for readability
        if [ "$max_ctx" -gt 0 ] && [[ "$max_ctx" =~ ^[0-9]+$ ]]; then
            formatted_ctx=$(printf "%'d" "$max_ctx" 2>/dev/null || echo "$max_ctx")
        else
            formatted_ctx="Unknown"
        fi
        
        printf "%-4d | %-${max_model_name_length}s | %-10s | %-11s | %-13s\n" \
            "$rank" "$model_tag" "$param_size" "$formatted_ctx" "$context_display"
        
        rank=$((rank + 1))
    done
    
    echo ""
    echo "Found ${#SORTED_DATA[@]} base model(s)."
    if [ -n "$filter" ]; then
        echo "Use './ollama-mama ctx --list' to see all base models."
    fi
}

# --- Main Script Logic ---

# Check arguments
if [ $# -eq 0 ]; then
    show_usage
    exit 1
fi

if [ "$1" != "ctx" ]; then
    echo "ERROR: First argument must be 'ctx'"
    show_usage
    exit 1
fi

case "$2" in
    --create)
        if [ $# -ne 2 ]; then
            echo "ERROR: --create expects exactly 2 arguments"
            show_usage
            exit 1
        fi
        create_models
        ;;
    --delete)
        if [ $# -ne 2 ]; then
            echo "ERROR: --delete expects exactly 2 arguments"
            show_usage
            exit 1
        fi
        delete_models
        ;;
    --delete-base)
        if [ $# -ne 3 ]; then
            echo "ERROR: --delete-base expects exactly 3 arguments (including model name)"
            show_usage
            exit 1
        fi
        delete_base_model "$3"
        ;;
    --create-base)
        if [ $# -ne 3 ]; then
            echo "ERROR: --create-base expects exactly 3 arguments (including model name)"
            show_usage
            exit 1
        fi
        create_base_model "$3"
        ;;
    --list)
        if [ $# -eq 2 ]; then
            list_models ""
        elif [ $# -eq 3 ]; then
            list_models "$3"
        else
            echo "ERROR: --list expects 2 or 3 arguments"
            show_usage
            exit 1
        fi
        ;;
    *)
        echo "ERROR: Unknown command '$2'"
        show_usage
        exit 1
        ;;
esac
